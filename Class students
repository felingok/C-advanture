#include <iostream>
#include <vector>
#include <algorithm>
#include <string>

class Student {
private:
    std::string name;
    int age;
    double gpa;

public:
    Student(std::string name, int age, double gpa)
        : name(name), age(age), gpa(gpa) {}

    std::string getName() const {
        return name;
    }

    double getGPA() const {
        return gpa;
    }

    void display() const {
        std::cout << "Имя: " << name << ", Возраст: " << age << ", GPA: " << gpa << std::endl;
    }
};

class StudentRecords {
private:
    std::vector<Student> students;

public:
    void addStudent(const Student& student) {
        students.push_back(student);
        std::cout << "Студент \"" << student.getName() << "\" добавлен.\n";
    }

    void removeStudent(const std::string& name) {
        auto it = std::remove_if(students.begin(), students.end(),
            [&name](const Student& student) {
                return student.getName() == name;
            });
        
        if (it != students.end()) {
            students.erase(it, students.end());
            std::cout << "Студент \"" << name << "\" удален.\n";
        } else {
            std::cout << "Студент с именем \"" << name << "\" не найден.\n";
        }
    }

    void searchStudent(const std::string& name) const {
        auto it = std::find_if(students.begin(), students.end(),
            [&name](const Student& student) {
                return student.getName() == name;
            });

        if (it != students.end()) {
            std::cout << "Найден студент:\n";
            it->display();
        } else {
            std::cout << "Студент с именем \"" << name << "\" не найден.\n";
        }
    }

    void listStudents() const {
        if (students.empty()) {
            std::cout << "Список студентов пуст.\n";
        } else {
            std::cout << "Список студентов:\n";
            for (const auto& student : students) {
                student.display();
            }
        }
    }

    void sortStudentsByGPA() {
        std::sort(students.begin(), students.end(),
            [](const Student& a, const Student& b) {
                return a.getGPA() > b.getGPA();  // Сортировка по убыванию GPA
            });
        std::cout << "Список студентов отсортирован по GPA.\n";
    }
};

void menu() {
    std::cout << "\nМеню:\n";
    std::cout << "1. Добавить студента\n";
    std::cout << "2. Удалить студента\n";
    std::cout << "3. Найти студента\n";
    std::cout << "4. Показать всех студентов\n";
    std::cout << "5. Отсортировать студентов по GPA\n";
    std::cout << "6. Выйти\n";
    std::cout << "Выберите действие: ";
}

int main() {
    StudentRecords records;
    int choice;

    while (true) {
        menu();
        std::cin >> choice;

        if (choice == 6) {
            std::cout << "Выход из программы...\n";
            break;
        }

        std::string name;
        int age;
        double gpa;

        switch (choice) {
            case 1:
                std::cout << "Введите имя студента: ";
                std::cin.ignore();
                std::getline(std::cin, name);
                std::cout << "Введите возраст студента: ";
                std::cin >> age;
                std::cout << "Введите GPA студента: ";
                std::cin >> gpa;
                records.addStudent(Student(name, age, gpa));
                break;
            case 2:
                std::cout << "Введите имя студента для удаления: ";
                std::cin.ignore();
                std::getline(std::cin, name);
                records.removeStudent(name);
                break;
            case 3:
                std::cout << "Введите имя студента для поиска: ";
                std::cin.ignore();
                std::getline(std::cin, name);
                records.searchStudent(name);
                break;
            case 4:
                records.listStudents();
                break;
            case 5:
                records.sortStudentsByGPA();
                break;
            default:
                std::cout << "Ошибка: Неверный выбор.\n";
                break;
        }
    }

    return 0;
}
